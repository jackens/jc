/**
 * Puzzle game.
 *
 * ![](https://jackens.github.io/jpeg/pink-painter.jpeg)
 */

import arrowClockwiseCircleFill from '../_icons-out/framework7io-framework7-icons/arrow_clockwise_circle_fill.js'
import arrowLeftCircleFill from '../_icons-out/framework7io-framework7-icons/arrow_left_circle_fill.js'
import arrowRightCircleFill from '../_icons-out/framework7io-framework7-icons/arrow_right_circle_fill.js'
import scope from '../_icons-out/framework7io-framework7-icons/scope.js'
import { $ } from './$.js'
import { BODY, DOCUMENT } from './common.js'
import { pinkPainterStyle } from '../style.js/pink-painter.style.js'
import { svgUse } from './svg-use.js'
import { svg } from './svg.js'

window.onload = () => {
  $({ e: svg(arrowClockwiseCircleFill, arrowLeftCircleFill, arrowRightCircleFill, scope), p: BODY })
  $({ e: pinkPainterStyle, p: BODY })

  const it = [0, 1, 2, 3, 4, 5, 6, 7]
  const levels = [
    // 01: strips
    '0000000000000000111111111111111122222222222222223333333333333333',
    // 02: red P
    '1111111113333311133113311331133113333311133111111331111111111111',
    // 03: blue P
    '1111111112222211122112211221122112222211122111111221111111111111',
    // 04: red PP
    '3331111131131111333111113111333131113113111133311111311111113111',
    // 05: 5
    '1111111111222211112111111122211111111211111112111122211111111111',
    // 06: blue PP
    '2221111121121111222111112111222121112112111122211111211111112111',
    // 07: L III
    '1111111111111111211212122112121221121212221212121111111111111111',
    // 08: I
    '1111111111122211111121111111211111112111111121111112221111111111',
    // 09: love
    '1133133113333333133333331333333311333331111333111111311111111111',
    // 10: A
    '1111311111131311111313111131113111333331113111311131113111111111',
    // 11: n
    '1111111111111111111111111121221111221121112111211121112111111111',
    // 12: i
    '1111111111110111111111111111011111110111111101111111011111111111',
    // 13: a
    '1111111111111111111111111112221111211211112112111112222111111111',
    // 14: I love
    '1111111101131311013333310133333101133311011131111111111111111111',
    // 15: IZA
    '1111111103331211011321210131222103112121033321211111111111111111',
    // 16: taichi symbol
    '3311123331122123111221221111122211122222112112223121122333122233',
    // 17: 17
    '1111111113122221331111211311121113112111131211111312111111111111',
    // 18: info sign
    '2233322223111322311311323111113231131132311311322311132222333222',
    // 19: music
    '1122222111222221112111211121112112211121222112212211222111112211',
    // 20: C64 Logo
    '1122211112222111222112222211122122111331222113331222211111222111',
    // 21: Microsoft logo
    '3333000033330000333300003333000022221111222211112222111122221111',
    // 22: Google logo
    '1122221112211221221111112111111121112222221111221221122111222211',
    // 23: Facebook logo
    '2222222222222112222212222222122222211112222212222222122222221222',
    // 24: HP logo
    '1211111112111111122212221212121212121212121212221111121111111211',
    // 25: JavaScript logo
    '1111111111111111111111111222122211121211111212221212111212221222',
    // 26: GitHub logo
    '1211112112211221122222212211112221211212212112122211112212222221',
    // 27: P(ots)
    '1222221112111211111112111222221112111111121111111211111112111111',
    // 28: (P)o(ts)
    '1111111111111111111111111112221111111211121112111211121112222211',
    // 29: (Po)t(s)
    '1111111111111111111111111222221111121111111211111112111111121111',
    // 30: (Pot)s
    '1111111111111111111111111122221111211111112222111111121111222211',
    // 31: hamburger
    '2222222221111122111111123333333200000002111111122111112222222222',
    // 32: ambulance
    '2232222221111111122113111221333111111311111111111331133123322332',
    // 33: 1 coin
    '2221112222113112211331112111311121113111221131122221112222222222',
    // 34: rocket
    '2221222222111222221012222211122222111222233133222332332223222322',
    // 35: magnet
    '3311112233111122331111223311112233111122333112221333222111332211',
    // 36: doll
    '2223222222313222223132221113111222333222233333222202022222020222',
    // 37: camera
    '1111111111122111222222222221122222122122221221222221122222222222',
    // 38: bug
    '2223222222010222021112020330330223303322033033022330332202303202',
    // 39: kaleidoscope
    '1112311110223301130230213330022222200333120320311033220111132111',
    // 40: mushroom
    '2230332223333032303033333333330322211222222112222221122222211222',
    // 41: house
    '2222222222333322233333323333333321111112211100122111001221111112',
    // 42: 42
    '0000000020023333200200032002000322223333000230000002300000023333',
    // 43: car
    '2222222223333222322223223222223233333333300330031001100111111111',
    // 44: trash can
    '3332333322222223311111333101013331010133310101333101013331111133',
    // 45: monitor
    '1111111110000001100000011000000110000001111111112221122221111112',
    // 46: gamepad
    '1111111111111111122222212232220223332222223220221221122111111111',
    // 47: dumbbell
    '1111111111111111111111111211112122111122222222222211112212111121',
    // 48: water drop
    '1112111111222111112221111222221112222211122222111122211111111111',
    // 49: boat
    '2222122222211222221112222111122222220222233333322233332222222222',
    // 50: fish
    '2221222222211222121111121111121111111111121111122221122222212222',
    // 51: lifebuoy
    '2233112223331112333221113322221111222233111223332111333222113322',
    // 52: anchor
    '2223222222323222222322222233322222232222322322322333332222232222',
    // 53: light bulb
    '2211122221111122211111222111112222111222223332222233322222232222',
    // 54: umbrella
    '2223332222333332233333332222122222221222222212222212122222212222',
    // 55: cherries
    '1111011111100111110110111101101113011031333113333331133313111131',
    // 56: wine glass
    '2111112221111122211111222233322222212222222122222221222221111122',
    // 57: fan
    '3111222233112221333122113333211111123333112213331222113322221113',
    // 58: green :|
    '1111111111111111110110111111111111111111110000111111111111111111',
    // 59: blue :|
    '1111111111111111112112111111111111111111112222111111111111111111',
    // 60: red :|
    '1111111111111111113113111111111111111111113333111111111111111111',
    // 61: red padlock
    '2221122222122122221221222212212223333332233333322333333223333332',
    // 63: skull
    '2222222222111222211111222131312221111122221312222211122222222222',
    // 63: scissors
    '3322221132322112233111222221122223311122323221123322221122222222',
    // 64: green padlock
    '2221122222122122221221222212212220000002200000022000000220000002'
  ]

  const px = n => `${n}px`

  const getMaxLevel = () => Math.min(+(window.localStorage.getItem('level')), levels.length - 1)

  let level = getMaxLevel()

  const updateButtons = () => {
    $({
      ...buttons[0],
      k: {
        style: { opacity: level > 0 ? 1 : 0.42 }
      }
    })
    $({
      ...buttons[2],
      k: {
        style: { opacity: level < getMaxLevel() ? 1 : 0.42 }
      }
    })
  }

  const restart = () => {
    updateButtons()
    it.forEach(y => {
      it.forEach(x => {
        const p = x < 7 || y < 7 ? 0 : 1
        if (p !== 0) {
          $({ ...cursor, p: boardCells[y][x].e })
        }
        $({
          ...levelCells[y][x], a: { c: levels[level][8 * y + x] }
        })
        $({
          ...boardCells[y][x], a: { c: p, p }
        })
      })
    })
  }

  const icon = id => svgUse(id, {
    a: { fill: '#f0c', stroke: 'none', width: 76, height: 76 }
  })

  const div = $({ t: 'div' }).e
  const buttons = [$({
    t: 'div',
    p: BODY,
    a: { class: 'button', i: -1 },
    i: [icon('arrow_left_circle_fill')],
    k: {
      onclick: () => {
        if (level > 0) {
          --level
          restart()
        }
      }
    }
  }), $({
    t: 'div',
    p: BODY,
    a: { class: 'button', i: 0 },
    i: [icon('arrow_clockwise_circle_fill')],
    k: { onclick: restart }
  }), $({
    t: 'div',
    p: BODY,
    a: { class: 'button', i: 1 },
    i: [icon('arrow_right_circle_fill')],
    k: {
      onclick: () => {
        if (level < getMaxLevel()) {
          ++level
          restart()
        }
      }
    }
  })]
  const cursor = $(icon('scope'))
  const levelCells = it.map(y => it.map(x => $({
    t: 'div',
    p: BODY,
    a: { class: 'level cell', x: x, y: y }
  })))
  const boardCells = it.map(y => it.map(x => $({
    t: 'div',
    p: BODY,
    a: { class: 'board cell', x: x, y: y }
  })))

  const test = (px, py) => {
    const x = ~~((px - parseInt(boardCells[0][0].e.style.left, 10)) / c2)
    const y = ~~((py - parseInt(boardCells[0][0].e.style.top, 10)) / c2)
    if (x >= 0 && x <= 7 && y >= 0 && y <= 7) {
      let c = +(boardCells[y][x].e.getAttribute('c'))
      c = c < 3 ? c + 1 : c
      const p = +(boardCells[y][x].e.getAttribute('p'))
      if (p === 0 && c <= +levels[level][8 * y + x]) {
        for (let i = 0; i < 4; ++i) {
          const x2 = x + +(i === 0) - +(i === 1)
          const y2 = y + +(i === 2) - +(i === 3)
          if (x2 >= 0 && x2 <= 7 && y2 >= 0 && y2 <= 7) {
            const p2 = +(boardCells[y2][x2].e.getAttribute('p'))
            if (p2 !== 0) {
              $({
                ...boardCells[y2][x2], a: { p: 0 }
              })
              $({
                ...boardCells[y][x], a: { c: c }
              })
              const result = boardCells.map(row => row.map(cell => cell.e.getAttribute('c')).join('')).join('')
              if (result === levels[level]) {
                $({ ...cursor, p: div })
                if (level + 1 > getMaxLevel()) {
                  window.localStorage.setItem('level', `${level + 1}`)
                  updateButtons()
                }
              } else {
                $({ ...cursor, p: boardCells[y][x].e })
                $({
                  ...boardCells[y][x], a: { p: 1 }
                })
              }
              return
            }
          }
        }
      }
    }
  }

  //                  16
  // ╔═══════════════════════════════════╗
  // ║ ┌───┐           ┌─┬─┬─┬─┬─┬─┬─┬─┐ ║
  // ║ │ < │           ├─┼─┼─┼─┼─┼─┼─┼─┤ ║
  // ║ └───┘           ├─┼─┼─┼─┼─┼─┼─┼─┤ ║
  // ║ ┌───┐           ├─┼─┼─┼─┼─┼─┼─┼─┤ ║
  // ║ │ @ │           ├─┼─┼─┼─┼─┼─┼─┼─┤ ║
  // ║ └───┘           ├─┼─┼─┼─┼─┼─┼─┼─┤ ║
  // ║ ┌───┐           ├─┼─┼─┼─┼─┼─┼─┼─┤ ║
  // ║ │ > │           ├─┼─┼─┼─┼─┼─┼─┼─┤ ║
  // ║ └───┘           └─┴─┴─┴─┴─┴─┴─┴─┘ ║
  // ║ ┌───┬───┬───┬───┬───┬───┬───┬───┐ ║
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║ 25
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ │   │   │   │   │   │   │   │   │ ║
  // ║ └───┴───┴───┴───┴───┴───┴───┴───┘ ║
  // ╚═══════════════════════════════════╝
  //
  //                           25
  // ╔═════════════════════════════════════════════════════╗
  // ║ ┌───┐ ┌───┐ ┌───┐ ┌───┬───┬───┬───┬───┬───┬───┬───┐ ║
  // ║ │ < │ │ @ │ │ > │ │   │   │   │   │   │   │   │   │ ║
  // ║ └───┘ └───┘ └───┘ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║                   │   │   │   │   │   │   │   │   │ ║
  // ║                   ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║                   │   │   │   │   │   │   │   │   │ ║
  // ║                   ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║                   │   │   │   │   │   │   │   │   │ ║
  // ║ ┌─┬─┬─┬─┬─┬─┬─┬─┐ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║ 16
  // ║ ├─┼─┼─┼─┼─┼─┼─┼─┤ │   │   │   │   │   │   │   │   │ ║
  // ║ ├─┼─┼─┼─┼─┼─┼─┼─┤ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ ├─┼─┼─┼─┼─┼─┼─┼─┤ │   │   │   │   │   │   │   │   │ ║
  // ║ ├─┼─┼─┼─┼─┼─┼─┼─┤ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ ├─┼─┼─┼─┼─┼─┼─┼─┤ │   │   │   │   │   │   │   │   │ ║
  // ║ ├─┼─┼─┼─┼─┼─┼─┼─┤ ├───┼───┼───┼───┼───┼───┼───┼───┤ ║
  // ║ ├─┼─┼─┼─┼─┼─┼─┼─┤ │   │   │   │   │   │   │   │   │ ║
  // ║ └─┴─┴─┴─┴─┴─┴─┴─┘ └───┴───┴───┴───┴───┴───┴───┴───┘ ║
  // ╚═════════════════════════════════════════════════════╝

  let c2

  const onresize = () => {
    const w = window.innerWidth
    const h = window.innerHeight
    const c1 = ~~Math.min(Math.min(w, h) / 16, Math.max(w, h) / 25)
    c2 = c1 << 1;

    [
      buttons[0].e,
      buttons[1].e,
      buttons[2].e,
      buttons[0].e.childNodes[0],
      buttons[1].e.childNodes[0],
      buttons[2].e.childNodes[0]
    ].forEach(element => $({
      e: element,
      k: {
        style: { width: px(c2), height: px(c2) }
      }
    }))

    const xo = w < h ? (w - 16 * c1) >> 1 : (w - 25 * c1) >> 1
    const yo = w < h ? (h - 25 * c1) >> 1 : (h - 16 * c1) >> 1

    for (let b = 0; b < 3; ++b) {
      $({
        ...buttons[b],
        k: {
          style: {
            left: w < h ? px(xo) : px(xo + 3 * b * c1),
            top: w < h ? px(yo + 3 * b * c1) : px(yo)
          }
        }
      })
    }

    it.forEach(y => {
      it.forEach(x => {
        $({
          ...levelCells[y][x],
          k: {
            style: {
              borderWidth: px(c1 / 10),
              width: px(c1),
              height: px(c1),
              left: w < h ? px(xo + 8 * c1 + x * c1) : px(xo + x * c1),
              top: w < h ? px(yo + y * c1) : px(yo + 8 * c1 + y * c1)
            }
          }
        })
        $({
          ...boardCells[y][x],
          k: {
            style: {
              borderWidth: px(c1 / 10),
              width: px(c2),
              height: px(c2),
              left: w < h ? px(xo + x * c2) : px(xo + 9 * c1 + x * c2),
              top: w < h ? px(yo + 9 * c1 + y * c2) : px(yo + y * c2)
            }
          }
        })
      })
    })
  }

  window.onresize = onresize
  restart()
  onresize()

  DOCUMENT.addEventListener('mousemove', e => test(e.pageX, e.pageY))
  DOCUMENT.addEventListener('touchmove', e => test(e.touches[0].pageX, e.touches[0].pageY))
}
