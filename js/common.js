/**
 * Common constants, aliases, and type definitions.
 *
 * #### `$CONFIG`
 *
 * Element configuration type:
 *
 * - `a` (*attributes*): attributes of the created or modified element set by `setAttribute` or `setAttributeNS`
 * - `e` (*element*): modified element
 * - `i` (*items*): an array of subelements of the created or modified element
 * - `k` (*keys*): keys (properties) to set in the created or modified element
 * - `n` (*namespace*): namespace for `createElementNS`, `setAttributeNS` and `removeAttributeNS` methods
 * - `p` (*parent*): reference to the parent element for the created or modified element
 * - `t` (*tag*): tag of the created element
 *
 * #### `JC_CONFIG`
 *
 * The `JC_CONFIG` format is based on three main keys:
 *
 * - `w` (*wrapper*):  `$CONFIG` format configuration of the component wrapper (`HTMLDivElement` element)
 * - `c` (*control*):  `$CONFIG` format configuration of the component control
 * - `l` (*label*):    `$CONFIG` format configuration of the component label (`HTMLLabelElement` element; applies to input controls of type `checkbox`, `radio` and `file`)
 *
 * All other keys are just an alternative, more convenient form for configuration using the main keys.
 *
 * The sample file selection button component shown below
 *
 * ![](https://jackens.github.io/png/jc.png)
 *
 * has the following HTML representation:
 *
 * ```html
 * <div class="jc" label="Label">
 *   <input type="file" id="jc-1" />
 *   <div>
 *     <label for="jc-1">Text</label>
 *   </div>
 * </div>
 * ```
 *
 * The file selection button component shown above was generated by the following code:
 *
 * ```js
 * import { $ } from '../js/$.js'
 * import { jc } from '../js/jc.js'
 * import { jcStyle } from '../style.js/jc.style.js'
 *
 * window.onload = () => $({
 *   e: document.body,
 *   i: [{ e: jcStyle }, jc({ type: 'file', label: 'Label', text: 'Text' })]
 * })
 * ```
 *
 * The `JC_CONFIG` format has the following default values:
 *
 * ```js
 * { […], t: 'input', class: 'jc', […] }
 * ```
 *
 * The `icon` and `text` keys are handled in a special way: they allow you to conveniently specify the icon and text of the component you are defining.
 *
 * All keys supported by the `JC_CONFIG` format:
 *
 * - `w`: wrapper configuration
 * - `c`: control configuration
 * - `l`: label configuration
 * - `w_a`: `w.a` configuration
 * - `class`: `w.a.class` configuration
 * - `label`: `w.a.label` configuration
 * - `w_k`: `w.k` configuration
 * - `p`: `w.p` configuration
 * - `w_p`: `w.p` configuration
 * - `c_a`: `c.a` configuration
 * - `type`: `c.a.type` configuration
 * - `c_i`: `c.i` configuration
 * - `c_k`: `c.k` configuration
 * - `onchange`: `c.k.onchange` configuration
 * - `onclick`: `c.k.onclick` configuration
 * - `oninput`: `c.k.oninput` configuration
 * - `onkeyup`: `c.k.onkeyup` configuration
 * - `style`: `c.k.style` configuration
 * - `c_t`: `c.t` configuration
 * - `t`: `c.t` configuration
 * - `l_a`: `l.a` configuration
 * - `l_i`: `l.i` configuration
 * - `l_k`: `l.k` configuration
 * - `icon`: icon
 * - `text`: text
 * - `[key: string]`:
 *     - `w.a[key]` configuration if `key.slice(0, 4) === 'w_a_'`
 *     - `w.k[key]` configuration if `key.slice(0, 4) === 'w_k_'`
 *     - `c.a[key]` configuration if `key.slice(0, 4) === 'c_a_'`
 *     - `c.k[key]` configuration if `key.slice(0, 4) === 'c_k_'`
 *     - `l.a[key]` configuration if `key.slice(0, 4) === 'l_a_'`
 *     - `l.k[key]` configuration if `key.slice(0, 4) === 'l_k_'`
 *     - `c.a[key]` configuration otherwise
 */

export const DOCUMENT = document
export const BODY = DOCUMENT.body

export const OBJECT = Object
export const ASSIGN = OBJECT.assign
export const CREATE = OBJECT.create
export const ENTRIES = OBJECT.entries
export const KEYS = OBJECT.keys
export const VALUES = OBJECT.values
export const IS_ARRAY = Array.isArray

export const EMPTY_STRING = ''
export const NAMESPACE_SVG = 'http://www.w3.org/2000/svg'

/**
 * @template T
 * @typedef {{ [key: string]: T }} MAP<T>
 */

/**
 * @template T
 * @typedef {{ [key: string]: T | TREE<T> }} TREE<T>
 */

/**
 * @template T
 * @typedef {{ e: T }} $E<T>
 */

/**
 * @typedef {{
 *   a?: MAP<any>
 *   e?: Element | Text | string | number
 *   i?: $CONFIG[]
 *   k?: MAP<any>
 *   n?: string
 *   p?: Element
 *   t?: string
 * }} $CONFIG
 */

/**
 * @typedef {{
 *  w?: $CONFIG
 *  c?: $CONFIG
 *  l?: $CONFIG
 *  w_a?: MAP<any>
 *  class?: string
 *  label?: string
 *  w_k?: MAP<any>
 *  p?: HTMLElement
 *  w_p?: HTMLElement
 *  c_a?: MAP<any>
 *  type?: string
 *  c_i?: $CONFIG[]
 *  c_k?: MAP<any>
 *  onchange?: any
 *  onclick?: any
 *  oninput?: any
 *  onkeyup?: any
 *  style?: MAP<any>
 *  t?: string
 *  c_t?: string
 *  l_a?: MAP<any>
 *  l_i?: $CONFIG[]
 *  l_k?: MAP<any>
 *  icon?: string
 *  text?: string
 *  [key: string]: any
 *}} JC_CONFIG
 */

/**
 * @typedef {MAP<TREE<string | number>>} JS2CSS
 */

/**
 * @typedef {[number?, ...any[]]} CHUNK
 */

/**
 * @typedef {CHUNK[]} CHUNKS
 */

/**
 * @typedef {(charAt: (pos: number) => string) => CHUNKS} MATCH
 */

/**
 * @typedef {MATCH[]} MATCHES
 */

/**
 * @typedef {[string, ...any[]]} TOKEN
 */

/**
 * @typedef {TOKEN[]} TOKENS
 */
